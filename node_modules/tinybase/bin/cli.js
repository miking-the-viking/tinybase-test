#! /usr/bin/env node
import{resolve as e,dirname as t}from"path";import{writeFileSync as r,readFileSync as s}from"fs";import{createStore as o}from"tinybase";import{createTools as a}from"tinybase/tools";import{fileURLToPath as i}from"url";const n=JSON.parse,m=Object,p=(...e)=>{return t=e=>process.stdout.write(e+"\n"),e.forEach(t);var t},c=e=>n(s(e,"utf8")),f=()=>{var e,t;p("","tinybase <command>","","Usage:",""),e=l,t=([,e,t],r)=>p(` tinybase ${r} ${e}`," - "+t,""),((e,t)=>{e.map(t)})(m.entries(e),(([e,r])=>t(r,e))),p("See also http://tinybase.org/guides/developer-tools/command-line/","")},l={help:[f,"","print this message"],version:[()=>p(c(e(t(i(import.meta.url)),"../package.json")).version),"","get the current TinyBase version"],getStoreApi:[async(t,s,i)=>{try{const m=c(t),f=a(o().setSchema(...(n=m,Array.isArray(n)?m:[m]))),[l,u]=await f.getPrettyStoreApi(s),d=e(i,s+".d.ts"),h=e(i,s+".ts");r(d,l,"utf8"),r(h,u,"utf8"),p("    Definition: "+d,"Implementation: "+h)}catch{process.stderr.write("ERROR: provide a valid schemaFile, storeName, and outputDir\n")}var n},"<schemaFile> <storeName> <outputDir>","generate .d.ts and .ts files from a schema file"]};(()=>{const[,,e,...t]=process.argv;(l[e]?.[0]??f)(...t)})();
